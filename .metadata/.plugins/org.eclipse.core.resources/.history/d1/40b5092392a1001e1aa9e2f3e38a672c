package com.devsuperior.dslearnbds.entities.sale;

import java.io.Serializable;
import java.time.Instant;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import com.devsuperior.dslearnbds.entities.learnship.Offer;
import com.devsuperior.dslearnbds.entities.login.User;

@Entity
public class EnrollmentAssociation implements Serializable {
	private static final long serialVersionUID = 1L;

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	
	private Instant enrollMoment;
	private Instant refundMoment;
	private boolean idAvailable;
	private boolean isOnlyUpdate;
	
	// associação de muitos para muitos
	@ManyToOne (optional = true, fetch = FetchType.EAGER) // @ManyToOne: porque muitas matrículas (Enrollment) têm um aluno (User)
	private Set<User> users = new HashSet<>();			  // optional = true: porque um aluno pode não estar matriculado em nenhuma versão (oferta = Offer) de curso (Course)
	private Set<Offer> offers = new HashSet<>();		  // Eager: porque é obrigado a buscar todas as tabelas quando se faz um get de User ou Offer porque é uma operação comum. Desvantagem: é lenta com grandes tabelas
	
	public EnrollmentAssociation() {}
	
	
	
}
